datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// ---------------------------------------------------------
//
//  CECILIAN ARCHIVE
//  Database Schema
//  --BAG 10 November 2020
//
///
/// "Archiving is as much about pruning the hedge
/// as it is about making sure it grows properly."
/// -- Robyn Hunter
///    12 January 2020
///
// ---------------------------------------------------------


// ---------------------------------------------------------
//
//  USERS AND PROFILES
//
// ---------------------------------------------------------

model User {
  id                   Int        @id @default(autoincrement())
  subject              String     @unique // The user's identifier in Auth0
  slug                 String     @unique // An in-app identifier e.g. for URLs
  profile              UserProfile? @relation("ProfileOwner")
  verifiedByKey        AccessKey  @relation("AccessKeyUser", fields: [verifiedByKeyId], references: [id])
  verifiedByKeyId      Int
  roles                UserRole[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime?
  archiveItemsCreated  ArchiveItem[]       @relation("ItemCreatedBy")
  collectionsOwned     ArchiveCollection[] @relation("CollectionOwner")
  collectionsCreated   ArchiveCollection[] @relation("CollectionCreatedBy")
}

model UserRole {
  id           Int       @id @default(autoincrement())
  roleName     String    @unique
  accessLevel  Int
  users        User[]
}

model UserProfile {
  id             Int        @id @default(autoincrement())
  user           User       @relation("ProfileOwner", fields: [userId], references: [id])
  userId         Int
  cecilian       Cecilian?  @relation("ProfileCecilian", fields: [cecilianId], references: [id])
  cecilianId     Int?
  accessKeys     AccessKey[] @relation("AccessKeyOwner")
  title          String?
  firstNames     String?
  lastNames      String?
  otherNames     String?
  picture        String?
  contactDetails UserContact[]
  anniversary60  Anniversary60Profile? @relation("Profile60th")
  visibility     Visibility @default(VISIBLE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
}
enum Visibility {
  VISIBLE
  HIDDEN
}

model UserContact {
  id            Int          @id @default(autoincrement())
  userProfile   UserProfile  @relation(fields: [userProfileId], references: [id])
  userProfileId Int
  type          UserContactType
  customType    String?
  value         String
  notes         String?
  visibility    Visibility   @default(VISIBLE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}
enum UserContactType {
  ADDRESS
  EMAIL
  PHONE
  CUSTOM
}

model Anniversary60Profile {
  id            Int          @id @default(autoincrement())
  userProfile   UserProfile? @relation("Profile60th", fields: [userProfileId], references: [id])
  userProfileId Int?
  title         String
  firstname     String
  surname       String
  prevNames     String
  address       String
  email         String
  phone         String
  otherInfo     String
  wouldLikeTo   String
  dietary       String
  updatedAt     DateTime
}

model AccessKey {
  id         Int          @id @default(autoincrement())
  key        String       @unique
  owner      UserProfile? @relation("AccessKeyOwner", fields: [ownerId], references: [id])
  ownerId    Int?
  usedBy     User[]       @relation("AccessKeyUser")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  removedAt  DateTime?
}


// ---------------------------------------------------------
//
//  CECILIANS AND ARCHIVE ITEMS
//
// ---------------------------------------------------------

model Cecilian {
  id         Int     @id @default(autoincrement())
  slug       String  @unique
  displayName String
  otherNames String?
  user       UserProfile? @relation("ProfileCecilian")
  tags       CecilianTag[] /// Years, Events, Roles
  inArchiveItems ArchiveItemCecilian[]
  authoredArchiveItems ArchiveItem[] @relation("ItemAuthor")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model ArchiveItemCecilian {
  id         Int     @id @default(autoincrement())
  cecilian   Cecilian? @relation(fields: [cecilianId], references: [id])
  cecilianId Int?
  item       ArchiveItem? @relation(fields: [itemId], references: [id])
  itemId     Int?
  addedAt    DateTime @default(now())
  removedAt  DateTime?
}

model ArchiveItem {
  id              Int     @id @default(autoincrement())
  slug            String  @unique
  archiveRef      String
  type            ArchiveItemType
  associatedDate  DateTime?
  collections     CollectionItem[]
  notes           String?
  author          Cecilian? @relation("ItemAuthor", fields: [authorId], references: [id])
  authorId        Int?
  tags            ArchiveItemTag[] /// Years, Events, Roles
  cecilians       ArchiveItemCecilian[]
  files           ArchiveItemFile[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  createdBy       User? @relation("ItemCreatedBy", fields: [createdById], references: [id])
  createdById     Int?
  updatedBy       User? @relation("ItemUpdatedBy", fields: [updatedById], references: [id])
  updatedById     Int?
}
enum ArchiveItemType {
  MINUTES
  PHOTOS
}

model ArchiveFile {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  kind        ArchiveFileKind
  name        String
  notes       String?
  url         String
  items       ArchiveItemFile[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  deletedBy   User? @relation("FileDeletedBy", fields: [deletedById], references: [id])
  deletedById Int?
}
enum ArchiveFileKind {
  TRANSCRIPTION
  SCAN
  PREVIOUSLY_DIGITISED
  CREATED_DIGITALLY
}

model ArchiveItemFile {
  id         Int     @id @default(autoincrement())
  file       ArchiveFile? @relation(fields: [fileId], references: [id])
  fileId     Int?
  item       ArchiveItem? @relation(fields: [itemId], references: [id])
  itemId     Int?
  addedAt    DateTime @default(now())
  removedAt  DateTime?
}


// ---------------------------------------------------------
//
//  TAGS AND THEIR RELATIONSHIPS
//
// ---------------------------------------------------------

model Year {
  id         Int     @id @default(autoincrement())
  slug       String  @unique /// e.g. 2010-2011
  name       String
  startDate  DateTime?
  endDate    DateTime?
  events     Event[] /// Backlinks
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  inTags     Tag[]
}

model Event {
  id             Int      @id @default(autoincrement())
  type           EventType
  name           String
  inherentYear   Year?    @relation(fields: [inherentYearId], references: [id])
  inherentYearId Int?
  roles          Role[] /// Backlinks
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  inTags         Tag[]
}
enum EventType {
  SHOW          /// Has inherent year
  ANNIVERSARY   /// Has inherent year
  EVENT         /// DOES NOT have inherent year
}

model Role {
  id              Int      @id @default(autoincrement())
  type            RoleType
  name            String
  inherentEvent   Event?   @relation(fields: [inherentEventId], references: [id])
  inherentEventId Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  inTags          Tag[]
}
enum RoleType {
  PERFORMANCE   /// Has inherent event (probably a show)
  PRODUCTION    /// DOES NOT have inherent event
  COMMITTEE     /// DOES NOT have inherent event
  SOCIETY       /// DOES NOT have inherent event
}

model Tag {
  id            Int      @id @default(autoincrement())
  type          TagType
  role          Role?    @relation(fields: [roleId], references: [id])
  roleId        Int?
  event         Event?   @relation(fields: [eventId], references: [id])
  eventId       Int?
  year          Year?    @relation(fields: [yearId], references: [id])
  yearId        Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  cecilians     CecilianTag[]
  archiveItems  ArchiveItemTag[]
}
enum TagType {
  YEAR
  EVENT
  ROLE
}

model CecilianTag {
  id          Int      @id @default(autoincrement())
  cecilian    Cecilian @relation(fields: [cecilianId], references: [id])
  cecilianId  Int
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       Int
  addedAt     DateTime @default(now())
  removedAt   DateTime?
}

model ArchiveItemTag {
  id         Int         @id @default(autoincrement())
  item       ArchiveItem @relation(fields: [itemId], references: [id])
  itemId     Int
  tag        Tag         @relation(fields: [tagId], references: [id])
  tagId      Int
  addedAt    DateTime    @default(now())
  removedAt  DateTime?
}


// ---------------------------------------------------------
//
//  COLLECTIONS
//
// ---------------------------------------------------------

model ArchiveCollection {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  type        ArchiveCollectionType
  name        String
  description String?
  physicalLocation String? /// only relevant for type: PHYSICAL
  owner       User? @relation("CollectionOwner", fields: [ownerId], references: [id])
  ownerId     Int?
  viewPerms   ArchiveCollectionViewPerms @default(PUBLIC)
  editPerms   ArchiveCollectionEditPerms @default(OPEN)
  items       CollectionItem[]
  createdAt   DateTime @default(now())
  createdBy   User @relation("CollectionCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedBy   User? @relation("CollectionUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int?
  deletedAt   DateTime?
}
enum ArchiveCollectionType {
  PHYSICAL
  SYSTEM
  USER
}
enum ArchiveCollectionViewPerms {
  PUBLIC
  PRIVATE
}
enum ArchiveCollectionEditPerms {
  OPEN
  CLOSED
}

model CollectionItem {
  id           Int     @id @default(autoincrement())
  item         ArchiveItem     @relation(fields: [itemId], references: [id])
  itemId       Int
  collection   ArchiveCollection @relation(fields: [collectionId], references: [id])
  collectionId Int
  itemIndex    String? /// e.g. P1, the index of this item in collection A1
  addedBy      User? @relation("CollectionItemAddedBy", fields: [addedById], references: [id])
  addedById    Int?
  addedAt      DateTime @default(now())
  updatedAt    DateTime @updatedAt
  removedAt    DateTime?
}
